
*******************************************************************************
after parsing
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (17,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (17,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (17,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (assignn, resultdef = $void = "untyped", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (vecn, resultdef = LongInt = "LongInt", pos = (17,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
               (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  nil
                  symbol = PRIMI
               )
               (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (17,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 0
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (18,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (18,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (18,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (assignn, resultdef = $void = "untyped", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (vecn, resultdef = LongInt = "LongInt", pos = (18,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
               (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  nil
                  symbol = DIFETTIVI
               )
               (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (18,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 0
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (19,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (19,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (19,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (assignn, resultdef = $void = "untyped", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (vecn, resultdef = LongInt = "LongInt", pos = (19,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
               (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  nil
                  symbol = SOPRABBONDANTI
               )
               (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (19,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 0
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (20,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (20,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (20,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (assignn, resultdef = $void = "untyped", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (vecn, resultdef = LongInt = "LongInt", pos = (20,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
               (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  nil
                  symbol = PERFETTI
               )
               (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (20,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 0
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (21,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (21,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
               nil
               symbol = PRIMI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (21,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (21,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (22,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (22,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
               nil
               symbol = DIFETTIVI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (22,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (22,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (23,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (23,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
               nil
               symbol = SOPRABBONDANTI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (23,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (23,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (24,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = LongInt = "LongInt", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (24,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (34,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (ltn, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = LongInt = "LongInt", pos = (25,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = N
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (25,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 2400
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (27,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (loadn, resultdef = LongInt = "LongInt", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = SOMMA
                  )
                  (calln, resultdef = LongInt = "LongInt", pos = (27,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = MyMathSigma(LongInt):LongInt;
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = N
                        )

                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (28,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (tempcreaten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC550
                        [ti_may_be_in_reg]
                        tempinit =
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (assignn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                        )
                        (typeconvn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                           (calln, resultdef = PText = "^Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              proc = $fpc_get_output:^Text;
                           )
                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                        left =
                        (callparan, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                           (typeconvn, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                              (loadn, resultdef = LongInt = "LongInt", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = N
                              )
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     (tempdeleten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC550
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (29,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (29,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (equaln, resultdef = Boolean = "Boolean", pos = (29,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (29,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (29,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           nil
                           symbol = PRIMI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (29,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (30,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (equaln, resultdef = Boolean = "Boolean", pos = (30,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (30,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (30,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (30,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           nil
                           symbol = PERFETTI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (30,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (31,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (31,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (ltn, resultdef = Boolean = "Boolean", pos = (31,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (31,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (31,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (31,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           nil
                           symbol = DIFETTIVI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (31,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (32,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (32,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (gtn, resultdef = Boolean = "Boolean", pos = (32,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (32,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (32,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (32,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           nil
                           symbol = SOPRABBONDANTI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (33,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = LongInt = "LongInt", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = LongInt = "LongInt", pos = (33,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (33,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (33,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (35,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC5D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC5D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (36,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = RawByteString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (37,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (37,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (37,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (ifn, resultdef = $void = "untyped", pos = (37,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (equaln, resultdef = Boolean = "Boolean", pos = (37,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
               (vecn, resultdef = LongInt = "LongInt", pos = (37,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (37,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = PRIMI
                  )
                  (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                     (loadn, resultdef = LongInt = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (37,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (tempcreaten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC650
                     [ti_may_be_in_reg]
                     tempinit =
                     nil
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                     )
                     (typeconvn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                        (calln, resultdef = PText = "^Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = $fpc_get_output:^Text;
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                     left =
                     (callparan, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                        (typeconvn, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_writeln_end(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  (tempdeleten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC650
                  )

               )
            )
            nil
            nil
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (38,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC6D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC6D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (39,67), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (39,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (39,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (ifn, resultdef = $void = "untyped", pos = (39,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (equaln, resultdef = Boolean = "Boolean", pos = (39,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
               (vecn, resultdef = LongInt = "LongInt", pos = (39,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (39,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = DIFETTIVI
                  )
                  (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                     (loadn, resultdef = LongInt = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (39,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (tempcreaten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC750
                     [ti_may_be_in_reg]
                     tempinit =
                     nil
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                     )
                     (typeconvn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                        (calln, resultdef = PText = "^Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = $fpc_get_output:^Text;
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                     left =
                     (callparan, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                        (typeconvn, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_writeln_end(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  (tempdeleten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC750
                  )

               )
            )
            nil
            nil
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (40,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC7D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC7D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (41,72), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (41,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (41,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (ifn, resultdef = $void = "untyped", pos = (41,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (equaln, resultdef = Boolean = "Boolean", pos = (41,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
               (vecn, resultdef = LongInt = "LongInt", pos = (41,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (41,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = SOPRABBONDANTI
                  )
                  (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                     (loadn, resultdef = LongInt = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (41,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (tempcreaten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC850
                     [ti_may_be_in_reg]
                     tempinit =
                     nil
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                     )
                     (typeconvn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                        (calln, resultdef = PText = "^Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = $fpc_get_output:^Text;
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                     left =
                     (callparan, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                        (typeconvn, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_writeln_end(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  (tempdeleten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC850
                  )

               )
            )
            nil
            nil
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (42,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC8D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC8D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (43,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (43,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (43,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 2400
         )
         (ifn, resultdef = $void = "untyped", pos = (43,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (equaln, resultdef = Boolean = "Boolean", pos = (43,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
               (vecn, resultdef = LongInt = "LongInt", pos = (43,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (43,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = PERFETTI
                  )
                  (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                     (loadn, resultdef = LongInt = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (43,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (tempcreaten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC950
                     [ti_may_be_in_reg]
                     tempinit =
                     nil
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                     )
                     (typeconvn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                        (calln, resultdef = PText = "^Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = $fpc_get_output:^Text;
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                     left =
                     (callparan, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                        (typeconvn, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = N
                           )
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_writeln_end(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                              )
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  (tempdeleten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC950
                  )

               )
            )
            nil
            nil
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (44,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (45,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (45,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (46,73), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (46,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (47,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (47,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = PRIMI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (48,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (48,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (49,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (50,77), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (50,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (51,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (51,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = DIFETTIVI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (52,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (52,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (53,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (53,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (54,82), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (55,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (55,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = SOPRABBONDANTI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (56,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (56,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (57,63), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (57,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (58,76), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (59,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = PERFETTI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (60,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (61,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (61,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (17,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (17,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                        (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (assignn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                           (assignn, resultdef = $void = "untyped", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                              (vecn, resultdef = LongInt = "LongInt", pos = (17,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = PRIMI
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = LongInt = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (17,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (18,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (18,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                        (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (assignn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                           (assignn, resultdef = $void = "untyped", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                              (vecn, resultdef = LongInt = "LongInt", pos = (18,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = DIFETTIVI
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = LongInt = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (18,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (19,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (19,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                        (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (assignn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                           (assignn, resultdef = $void = "untyped", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                              (vecn, resultdef = LongInt = "LongInt", pos = (19,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = SOPRABBONDANTI
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = LongInt = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (19,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (20,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (20,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                        (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                           (assignn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                           (assignn, resultdef = $void = "untyped", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                              (vecn, resultdef = LongInt = "LongInt", pos = (20,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = PERFETTI
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = LongInt = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (20,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (21,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (21,6), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
               nil
               symbol = PRIMI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (21,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (21,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (22,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (22,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
               nil
               symbol = DIFETTIVI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (22,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (22,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (23,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (vecn, resultdef = LongInt = "LongInt", pos = (23,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
               nil
               symbol = SOPRABBONDANTI
            )
            (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (23,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (23,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (24,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = LongInt = "LongInt", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (24,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 2
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (34,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (ltn, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
            (loadn, resultdef = LongInt = "LongInt", pos = (25,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = N
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (25,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 2400
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (27,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (loadn, resultdef = LongInt = "LongInt", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = SOMMA
                  )
                  (calln, resultdef = LongInt = "LongInt", pos = (27,11), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = MyMathSigma(LongInt):LongInt;
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = N
                        )

                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (28,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (tempcreaten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC550
                        [ti_may_be_in_reg]
                        tempinit =
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (assignn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                        )
                        (typeconvn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                           (calln, resultdef = PText = "^Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                              proc = $fpc_get_output:^Text;
                           )
                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                        left =
                        (callparan, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                           (typeconvn, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                              (loadn, resultdef = LongInt = "LongInt", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = N
                              )
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                     (tempdeleten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC550
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (29,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (29,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (equaln, resultdef = Boolean = "Boolean", pos = (29,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (29,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (29,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = PRIMI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (29,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (30,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (equaln, resultdef = Boolean = "Boolean", pos = (30,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (30,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (30,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (30,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = PERFETTI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (30,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (31,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (31,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (ltn, resultdef = Boolean = "Boolean", pos = (31,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (31,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (31,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (31,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = DIFETTIVI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (31,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (32,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (32,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (gtn, resultdef = Boolean = "Boolean", pos = (32,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                     (loadn, resultdef = LongInt = "LongInt", pos = (32,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = SOMMA
                     )
                     (loadn, resultdef = LongInt = "LongInt", pos = (32,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                     (vecn, resultdef = LongInt = "LongInt", pos = (32,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = SOPRABBONDANTI
                        )
                        (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = N
                           )
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (33,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = LongInt = "LongInt", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = LongInt = "LongInt", pos = (33,8), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (33,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (33,9), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (35,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC5D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC5D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (36,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = RawByteString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (37,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (37,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (37,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (37,47), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (37,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (37,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = PRIMI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (37,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (nothingn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (tempcreaten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC650
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                       )
                                       (typeconvn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                          (calln, resultdef = PText = "^Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                             proc = $fpc_get_output:^Text;
                                          )
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                       left =
                                       (callparan, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                          (typeconvn, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )

                                       )
                                       (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                       (callparan, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_writeln_end(var Text);
                                       left =
                                       (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC650
                                    )

                                 )
                              )
                              nil
                              nil
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (38,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC6D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC6D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (39,67), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (39,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (39,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (39,49), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (39,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (39,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = DIFETTIVI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (39,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (nothingn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (tempcreaten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC750
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                       )
                                       (typeconvn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                          (calln, resultdef = PText = "^Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                             proc = $fpc_get_output:^Text;
                                          )
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                       left =
                                       (callparan, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                          (typeconvn, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )

                                       )
                                       (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                       (callparan, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_writeln_end(var Text);
                                       left =
                                       (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC750
                                    )

                                 )
                              )
                              nil
                              nil
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (40,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC7D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC7D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (41,72), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (41,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (41,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (41,54), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (41,51), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (41,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = SOPRABBONDANTI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (41,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (nothingn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (tempcreaten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC850
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                       )
                                       (typeconvn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                          (calln, resultdef = PText = "^Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                             proc = $fpc_get_output:^Text;
                                          )
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                       left =
                                       (callparan, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                          (typeconvn, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )

                                       )
                                       (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                       (callparan, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_writeln_end(var Text);
                                       left =
                                       (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC850
                                    )

                                 )
                              )
                              nil
                              nil
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (42,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC8D0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC8D0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (43,66), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (43,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = LongInt = "LongInt", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (43,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (43,48), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (43,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (43,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = PERFETTI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (43,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (nothingn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (tempcreaten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC950
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                       )
                                       (typeconvn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                          (calln, resultdef = PText = "^Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                             proc = $fpc_get_output:^Text;
                                          )
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                       left =
                                       (callparan, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                          (typeconvn, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )

                                       )
                                       (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                       (callparan, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       proc = $fpc_writeln_end(var Text);
                                       left =
                                       (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC950
                                    )

                                 )
                              )
                              nil
                              nil
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (44,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (45,60), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (45,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (46,73), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (46,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (47,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (47,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = PRIMI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (48,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (48,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (49,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (50,77), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (50,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (51,66), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (51,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = DIFETTIVI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (52,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (52,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (53,69), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (53,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (54,82), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (55,71), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (55,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = SOPRABBONDANTI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (56,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (56,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (57,63), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (57,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
         left =
         (callparan, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (58,76), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
         left =
         (callparan, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (59,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
         left =
         (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = PERFETTI
            )

         )
         (callparan, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 10
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (60,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (61,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (61,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = OUT_FILE_TEX
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (17,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (17,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                                    (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (assignn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (17,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                                       (assignn, resultdef = $void = "untyped", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                          (vecn, resultdef = LongInt = "LongInt", pos = (17,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                             (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (17,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = PRIMI
                                             )
                                             (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                (loadn, resultdef = LongInt = "LongInt", pos = (17,40), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                             )
                                          )
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (17,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (18,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (18,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                                    (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (nothingn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (assignn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (18,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                                       (assignn, resultdef = $void = "untyped", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                          (vecn, resultdef = LongInt = "LongInt", pos = (18,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                             (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (18,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = DIFETTIVI
                                             )
                                             (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                (loadn, resultdef = LongInt = "LongInt", pos = (18,44), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                             )
                                          )
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (18,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (19,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (19,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                                    (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (assignn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (19,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                                       (assignn, resultdef = $void = "untyped", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                          (vecn, resultdef = LongInt = "LongInt", pos = (19,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                             (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (19,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = SOPRABBONDANTI
                                             )
                                             (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                (loadn, resultdef = LongInt = "LongInt", pos = (19,49), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                             )
                                          )
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (19,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (20,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (20,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 7
                                    (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (nothingn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 7
                                       (assignn, resultdef = $void = "untyped", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (20,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (20,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (20,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                                       (assignn, resultdef = $void = "untyped", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                          (vecn, resultdef = LongInt = "LongInt", pos = (20,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                             (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (20,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = PERFETTI
                                             )
                                             (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                (loadn, resultdef = LongInt = "LongInt", pos = (20,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                             )
                                          )
                                          (ordconstn, resultdef = LongInt = "LongInt", pos = (20,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (21,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (vecn, resultdef = LongInt = "LongInt", pos = (21,6), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (21,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = PRIMI
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (21,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (21,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (22,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (vecn, resultdef = LongInt = "LongInt", pos = (22,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (22,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = DIFETTIVI
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (22,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (22,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (23,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (vecn, resultdef = LongInt = "LongInt", pos = (23,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (23,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = SOPRABBONDANTI
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (23,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1
                        )
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (23,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (24,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (24,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 2
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (34,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (ltn, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (25,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (25,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 2400
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (27,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (loadn, resultdef = LongInt = "LongInt", pos = (27,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = SOMMA
                              )
                              (calln, resultdef = LongInt = "LongInt", pos = (27,11), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = MyMathSigma(LongInt):LongInt;
                                 left =
                                 (callparan, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (27,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )

                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (28,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (tempcreaten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC550
                                    [ti_may_be_in_reg]
                                    tempinit =
                                    nil
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                    )
                                    (typeconvn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                       (calln, resultdef = PText = "^Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_get_output:^Text;
                                       )
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                    left =
                                    (callparan, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                       (stringconstn, resultdef = ShortString = "ShortString", pos = (28,16), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                       )

                                    )
                                    (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                       (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                          (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                    left =
                                    (callparan, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                       (typeconvn, resultdef = Int64 = "Int64", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                          (loadn, resultdef = LongInt = "LongInt", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                       )

                                    )
                                    (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                       (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                          (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_writeln_end(var Text);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                       (typeconvn, resultdef = Text = "Text", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                          (derefn, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = Pointer = "^untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC550 flags = [ti_may_be_in_reg])
                                             )
                                          )
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                 (tempdeleten, resultdef = $void = "untyped", pos = (28,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC550
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (29,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (29,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (29,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = SOMMA
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (29,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              (assignn, resultdef = $void = "untyped", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (29,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = PRIMI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (29,25), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (29,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              nil
                              nil
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (30,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (equaln, resultdef = Boolean = "Boolean", pos = (30,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (loadn, resultdef = LongInt = "LongInt", pos = (30,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = SOMMA
                                 )
                                 (loadn, resultdef = LongInt = "LongInt", pos = (30,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                              (assignn, resultdef = $void = "untyped", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (30,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (30,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = PERFETTI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (30,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (30,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              nil
                              nil
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (31,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (31,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (ltn, resultdef = Boolean = "Boolean", pos = (31,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (loadn, resultdef = LongInt = "LongInt", pos = (31,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = SOMMA
                                 )
                                 (loadn, resultdef = LongInt = "LongInt", pos = (31,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                              (assignn, resultdef = $void = "untyped", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (31,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (31,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = DIFETTIVI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (31,29), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (31,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              nil
                              nil
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (32,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (ifn, resultdef = $void = "untyped", pos = (32,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (gtn, resultdef = Boolean = "Boolean", pos = (32,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                 (loadn, resultdef = LongInt = "LongInt", pos = (32,6), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = SOMMA
                                 )
                                 (loadn, resultdef = LongInt = "LongInt", pos = (32,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                              (assignn, resultdef = $void = "untyped", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                 (vecn, resultdef = LongInt = "LongInt", pos = (32,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                    (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (32,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = SOPRABBONDANTI
                                    )
                                    (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                    )
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                              nil
                              nil
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (33,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = LongInt = "LongInt", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (addn, resultdef = LongInt = "LongInt", pos = (33,8), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (33,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (33,9), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                                    value = 1
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (35,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC5D0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                           )
                           (typeconvn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                              (calln, resultdef = PText = "^Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_get_output:^Text;
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                           left =
                           (callparan, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                              (stringconstn, resultdef = ShortString = "ShortString", pos = (35,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_writeln_end(var Text);
                           left =
                           (callparan, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC5D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (35,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC5D0
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (36,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = AssignFile(out Text;const RawByteString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (36,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (36,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (37,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (37,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (37,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (ifn, resultdef = $void = "untyped", pos = (37,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (equaln, resultdef = Boolean = "Boolean", pos = (37,47), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                             (vecn, resultdef = LongInt = "LongInt", pos = (37,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (37,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = PRIMI
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (37,45), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                )
                                             )
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (37,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (tempcreaten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC650
                                                   [ti_may_be_in_reg]
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                                   )
                                                   (typeconvn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                      (calln, resultdef = PText = "^Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_get_output:^Text;
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                                   left =
                                                   (callparan, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                                      (typeconvn, resultdef = Int64 = "Int64", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = LongInt = "LongInt", pos = (37,64), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_writeln_end(var Text);
                                                   left =
                                                   (callparan, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC650 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                (tempdeleten, resultdef = $void = "untyped", pos = (37,55), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC650
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (38,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC6D0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                           )
                           (typeconvn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                              (calln, resultdef = PText = "^Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_get_output:^Text;
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                           left =
                           (callparan, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                              (stringconstn, resultdef = ShortString = "ShortString", pos = (38,23), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_writeln_end(var Text);
                           left =
                           (callparan, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC6D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC6D0
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (39,67), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (39,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (39,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (39,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (39,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (ifn, resultdef = $void = "untyped", pos = (39,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (equaln, resultdef = Boolean = "Boolean", pos = (39,49), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                             (vecn, resultdef = LongInt = "LongInt", pos = (39,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (39,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = DIFETTIVI
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (39,47), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                )
                                             )
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (39,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (tempcreaten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC750
                                                   [ti_may_be_in_reg]
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                                   )
                                                   (typeconvn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                      (calln, resultdef = PText = "^Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_get_output:^Text;
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                                   left =
                                                   (callparan, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                                      (typeconvn, resultdef = Int64 = "Int64", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = LongInt = "LongInt", pos = (39,66), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_writeln_end(var Text);
                                                   left =
                                                   (callparan, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC750 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                (tempdeleten, resultdef = $void = "untyped", pos = (39,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC750
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (40,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC7D0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                           )
                           (typeconvn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                              (calln, resultdef = PText = "^Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_get_output:^Text;
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                           left =
                           (callparan, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                              (stringconstn, resultdef = ShortString = "ShortString", pos = (40,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_writeln_end(var Text);
                           left =
                           (callparan, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC7D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (40,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC7D0
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (41,72), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (41,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (41,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (ifn, resultdef = $void = "untyped", pos = (41,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (equaln, resultdef = Boolean = "Boolean", pos = (41,54), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                             (vecn, resultdef = LongInt = "LongInt", pos = (41,51), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (41,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = SOPRABBONDANTI
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (41,52), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                )
                                             )
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (41,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (tempcreaten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC850
                                                   [ti_may_be_in_reg]
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                                   )
                                                   (typeconvn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                      (calln, resultdef = PText = "^Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_get_output:^Text;
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                                   left =
                                                   (callparan, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                                      (typeconvn, resultdef = Int64 = "Int64", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = LongInt = "LongInt", pos = (41,71), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_writeln_end(var Text);
                                                   left =
                                                   (callparan, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC850 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                (tempdeleten, resultdef = $void = "untyped", pos = (41,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC850
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (42,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC8D0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                           )
                           (typeconvn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                              (calln, resultdef = PText = "^Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_get_output:^Text;
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                           left =
                           (callparan, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                              (stringconstn, resultdef = ShortString = "ShortString", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_writeln_end(var Text);
                           left =
                           (callparan, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC8D0 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (42,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC8D0
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (43,66), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (43,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2400
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = LongInt = "LongInt", pos = (43,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = LongInt = "LongInt", pos = (43,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (43,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (ifn, resultdef = $void = "untyped", pos = (43,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (equaln, resultdef = Boolean = "Boolean", pos = (43,48), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                             (vecn, resultdef = LongInt = "LongInt", pos = (43,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (43,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = PERFETTI
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (43,46), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                )
                                             )
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (43,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (tempcreaten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EEEC950
                                                   [ti_may_be_in_reg]
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                                   )
                                                   (typeconvn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                      (calln, resultdef = PText = "^Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_get_output:^Text;
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_sint(LongInt;var Text;Int64);
                                                   left =
                                                   (callparan, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 3
                                                      (typeconvn, resultdef = Int64 = "Int64", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = LongInt = "LongInt", pos = (43,65), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_writeln_end(var Text);
                                                   left =
                                                   (callparan, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EEEC950 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                (tempdeleten, resultdef = $void = "untyped", pos = (43,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EEEC950
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (44,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Rewrite(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (44,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (45,60), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (45,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (45,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,59), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (45,49), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (46,73), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (46,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (46,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (46,72), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (46,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (47,62), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (47,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
                     left =
                     (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (47,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = PRIMI
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (47,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (47,61), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (48,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (48,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (48,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (49,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (49,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,63), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (49,53), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (50,77), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (50,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (50,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (50,76), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (50,55), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (51,66), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (51,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
                     left =
                     (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (51,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = DIFETTIVI
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (51,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (51,65), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (52,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (52,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (52,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (53,69), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (53,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (53,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (53,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (54,82), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (54,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (54,81), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (54,60), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (55,71), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (55,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
                     left =
                     (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (55,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = SOPRABBONDANTI
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (55,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (55,70), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (56,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (56,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (56,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (57,63), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (57,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampatitolocapitolo(var Text;AnsiString;AnsiString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (57,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (57,52), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (58,76), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampauno_Semplificata(var Text;AnsiString;LongInt);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (58,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (58,75), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                     (callparan, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (58,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (59,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampavettore(var Text;var MyType_arrayInteger;LongInt);
                     left =
                     (callparan, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MyType_arrayInteger = "Array[1..2400] Of LongInt", pos = (59,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = PERFETTI
                        )

                     )
                     (callparan, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (59,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (59,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 10
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (60,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (60,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (61,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (61,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = CloseFile(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (61,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = OUT_FILE_TEX
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (16,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)
